/* Generated By:JavaCC: Do not edit this line. JavaParserConstants.java */
package org.nice2cu.mql.jcclexer;


//  TODO add support for "=>" operator

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JavaParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITESPACE = 1;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 4;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 5;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int AND = 8;
  /** RegularExpression Id. */
  int BEGIN = 9;
  /** RegularExpression Id. */
  int BOOL = 10;
  /** RegularExpression Id. */
  int CASE = 11;
  /** RegularExpression Id. */
  int DEF = 12;
  /** RegularExpression Id. */
  int _DEFAULT = 13;
  /** RegularExpression Id. */
  int DEFINE = 14;
  /** RegularExpression Id. */
  int ELSE = 15;
  /** RegularExpression Id. */
  int END = 16;
  /** RegularExpression Id. */
  int EXTERN = 17;
  /** RegularExpression Id. */
  int FN = 18;
  /** RegularExpression Id. */
  int IF = 19;
  /** RegularExpression Id. */
  int IFF = 20;
  /** RegularExpression Id. */
  int IN = 21;
  /** RegularExpression Id. */
  int INCLUDE = 22;
  /** RegularExpression Id. */
  int IS = 23;
  /** RegularExpression Id. */
  int LAZY = 24;
  /** RegularExpression Id. */
  int LET = 25;
  /** RegularExpression Id. */
  int MODULE = 26;
  /** RegularExpression Id. */
  int NOT = 27;
  /** RegularExpression Id. */
  int OBJECT = 28;
  /** RegularExpression Id. */
  int OF = 29;
  /** RegularExpression Id. */
  int OR = 30;
  /** RegularExpression Id. */
  int PRIVATE = 31;
  /** RegularExpression Id. */
  int PUBLIC = 32;
  /** RegularExpression Id. */
  int REC = 33;
  /** RegularExpression Id. */
  int SIGNATURE = 34;
  /** RegularExpression Id. */
  int SIGNED = 35;
  /** RegularExpression Id. */
  int STRING = 36;
  /** RegularExpression Id. */
  int SWITCH = 37;
  /** RegularExpression Id. */
  int THEN = 38;
  /** RegularExpression Id. */
  int TYPEDEF = 39;
  /** RegularExpression Id. */
  int _TYPEINFO_ = 40;
  /** RegularExpression Id. */
  int UNSIGNED = 41;
  /** RegularExpression Id. */
  int _XOR = 42;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 43;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 44;
  /** RegularExpression Id. */
  int HEX_LITERAL = 45;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 46;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 47;
  /** RegularExpression Id. */
  int DECIMAL_FLOATING_POINT_LITERAL = 48;
  /** RegularExpression Id. */
  int DECIMAL_EXPONENT = 49;
  /** RegularExpression Id. */
  int HEXADECIMAL_FLOATING_POINT_LITERAL = 50;
  /** RegularExpression Id. */
  int HEXADECIMAL_EXPONENT = 51;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 52;
  /** RegularExpression Id. */
  int STRING_LITERAL = 53;
  /** RegularExpression Id. */
  int IDENTIFIER = 54;
  /** RegularExpression Id. */
  int LETTER = 55;
  /** RegularExpression Id. */
  int PART_LETTER = 56;
  /** RegularExpression Id. */
  int LPAREN = 57;
  /** RegularExpression Id. */
  int RPAREN = 58;
  /** RegularExpression Id. */
  int LBRACE = 59;
  /** RegularExpression Id. */
  int RBRACE = 60;
  /** RegularExpression Id. */
  int LBRACKET = 61;
  /** RegularExpression Id. */
  int RBRACKET = 62;
  /** RegularExpression Id. */
  int SEMICOLON = 63;
  /** RegularExpression Id. */
  int COMMA = 64;
  /** RegularExpression Id. */
  int DOT = 65;
  /** RegularExpression Id. */
  int AT = 66;
  /** RegularExpression Id. */
  int ASSIGN = 67;
  /** RegularExpression Id. */
  int LT = 68;
  /** RegularExpression Id. */
  int BANG = 69;
  /** RegularExpression Id. */
  int TILDE = 70;
  /** RegularExpression Id. */
  int HOOK = 71;
  /** RegularExpression Id. */
  int COLON = 72;
  /** RegularExpression Id. */
  int EQ = 73;
  /** RegularExpression Id. */
  int LE = 74;
  /** RegularExpression Id. */
  int GE = 75;
  /** RegularExpression Id. */
  int NE = 76;
  /** RegularExpression Id. */
  int SC_OR = 77;
  /** RegularExpression Id. */
  int SC_AND = 78;
  /** RegularExpression Id. */
  int INCR = 79;
  /** RegularExpression Id. */
  int DECR = 80;
  /** RegularExpression Id. */
  int PLUS = 81;
  /** RegularExpression Id. */
  int MINUS = 82;
  /** RegularExpression Id. */
  int STAR = 83;
  /** RegularExpression Id. */
  int SLASH = 84;
  /** RegularExpression Id. */
  int BIT_AND = 85;
  /** RegularExpression Id. */
  int BIT_OR = 86;
  /** RegularExpression Id. */
  int XOR = 87;
  /** RegularExpression Id. */
  int REM = 88;
  /** RegularExpression Id. */
  int LSHIFT = 89;
  /** RegularExpression Id. */
  int PLUSASSIGN = 90;
  /** RegularExpression Id. */
  int MINUSASSIGN = 91;
  /** RegularExpression Id. */
  int STARASSIGN = 92;
  /** RegularExpression Id. */
  int SLASHASSIGN = 93;
  /** RegularExpression Id. */
  int ANDASSIGN = 94;
  /** RegularExpression Id. */
  int ORASSIGN = 95;
  /** RegularExpression Id. */
  int XORASSIGN = 96;
  /** RegularExpression Id. */
  int REMASSIGN = 97;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 98;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 99;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN = 100;
  /** RegularExpression Id. */
  int ELLIPSIS = 101;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 1;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<WHITESPACE>",
    "<token of kind 2>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 7>",
    "\"and\"",
    "\"begin\"",
    "\"bool\"",
    "\"case\"",
    "\"def\"",
    "\"default\"",
    "\"define\"",
    "\"else\"",
    "\"end\"",
    "\"extern\"",
    "\"fn\"",
    "\"if\"",
    "\"iff\"",
    "\"in\"",
    "\"include\"",
    "\"is\"",
    "\"lazy\"",
    "\"let\"",
    "\"module\"",
    "\"not\"",
    "\"object\"",
    "\"of\"",
    "\"or\"",
    "\"private\"",
    "\"public\"",
    "\"rec\"",
    "\"signature\"",
    "\"signed\"",
    "\"string\"",
    "\"switch\"",
    "\"then\"",
    "\"typedef\"",
    "\"_typeinfo_\"",
    "\"unsigned\"",
    "\"xor\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DECIMAL_FLOATING_POINT_LITERAL>",
    "<DECIMAL_EXPONENT>",
    "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
    "<HEXADECIMAL_EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"@\"",
    "\"=\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"...\"",
  };

}
